
package my.Packet;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.protocol.network.Icmp;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Tcp;
import org.jnetpcap.protocol.tcpip.Udp;
import org.jnetpcap.protocol.tcpip.Http;

/**
 *
 * @author Ayush
 */
public class Packet_Portal extends javax.swing.JFrame {
    private TCP taskTCP;
    private UDP taskUDP;
    private HTTP taskHTTP;
    
    
    
    
    /**
     * Creates new form Packet_Capture1
     */
    public Packet_Portal() throws HeadlessException{
        initComponents();
        
        redirectSystemStreams();
        jTextField1.addKeyListener(new KeyAdapter(){
            @Override
            public void keyReleased(KeyEvent e){
                JTextField textField = (JTextField)e.getSource();
                String text = textField.getText();
                textField.setText(text.toUpperCase());
            }
            @Override
            public void keyTyped(KeyEvent e){
            }
            @Override
            public void keyPressed(KeyEvent e){
                 JTextField textField = (JTextField)e.getSource();
                String text = textField.getText();
                textField.setText(text.toUpperCase());
            }
        });
       
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        button7 = new java.awt.Button();
        button8 = new java.awt.Button();
        button9 = new java.awt.Button();
        button11 = new java.awt.Button();
        label1 = new java.awt.Label();
        textArea1 = new java.awt.TextArea();
        jPanel1 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        jTextField1 = new javax.swing.JTextField();
        button1 = new java.awt.Button();
        button2 = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Packet Portal");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(255, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filters"));
        jPanel2.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N

        button7.setBackground(new java.awt.Color(0, 153, 204));
        button7.setFont(new java.awt.Font("Showcard Gothic", 1, 12)); // NOI18N
        button7.setLabel("TCP");
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });

        button8.setBackground(new java.awt.Color(255, 51, 51));
        button8.setFont(new java.awt.Font("Showcard Gothic", 1, 12)); // NOI18N
        button8.setLabel("UDP");
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });

        button9.setBackground(new java.awt.Color(153, 153, 0));
        button9.setFont(new java.awt.Font("Showcard Gothic", 1, 12)); // NOI18N
        button9.setLabel("HTTP");
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button7, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(button8, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(button9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        button11.setBackground(new java.awt.Color(204, 204, 204));
        button11.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        button11.setLabel("Exit");
        button11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button11ActionPerformed(evt);
            }
        });

        label1.setFont(new java.awt.Font("Harrington", 3, 12)); // NOI18N
        label1.setText("8t");

        textArea1.setBackground(new java.awt.Color(204, 153, 255));
        textArea1.setEditable(false);

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Input"));
        jPanel1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N

        label2.setFont(new java.awt.Font("Calibri Light", 1, 12)); // NOI18N
        label2.setText("Enter Interface Number:");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        button1.setBackground(new java.awt.Color(255, 204, 255));
        button1.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        button1.setLabel("Run");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setBackground(new java.awt.Color(204, 255, 204));
        button2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        button2.setLabel("Clear");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 645, Short.MAX_VALUE)
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button11ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_button11ActionPerformed
   
    
    class TCP extends SwingWorker<Void, Void>{
    
        @Override
        public Void doInBackground(){
        TCPcode();
        return null;
        }
        
        @Override
        public void done(){
        JOptionPane.showMessageDialog(null, "Packet fetching complete!");
        }
        
    }
    public void TCPcode() {
    List<PcapIf> alldevs = new ArrayList<PcapIf>();  //Will Fill up details of Network Interface Cards
    StringBuilder err = new StringBuilder();  //For giving Error Messages
    
    //Pcap.findAllDevs is used to retrieve list of interfaces
    
    int r = Pcap.findAllDevs(alldevs, err);
    if(r == Pcap.NOT_OK || alldevs.isEmpty())
    {
     System.err.printf("Error reading list of devices. Error is %s: ",err.toString());
    }
    else{
        System.out.println("Network Devices Found:\n");
    }
    
    //getname() and getDescription() methods are used 
    int i=1;
    for(PcapIf device: alldevs){
           try {
               byte[] mac = device.getHardwareAddress();
               if(mac == null){
                   continue; //Interface doesn't have a hardware
               }
               String description = (device.getDescription());
               System.out.printf("**************************************************************\n%d. Name: %s\n   Description: %s\n   MAC Address: %s\n", i++, device.getName(),description, mac_string(mac));
           } catch (IOException ex) {
               Logger.getLogger(Packet_Portal.class.getName()).log(Level.SEVERE, null, ex);
           }
            }
        System.out.printf("**************************************************************");
    
       
    //We will now ask User to select an interface.
    System.out.print("\nChoose the interface: ");
    try{
        Thread.sleep(10000);
    }catch(InterruptedException ex){
        Thread.currentThread().interrupt();
    }
    String a = jTextField1.getText();
    int ans = Integer.parseInt(a);
    ans--;
    //Scanner in = new Scanner(System.in);
    
    //int ans = Integer.parseInt(in.nextLine()); //Changing scanner into integer
    //ans--;
    
    //Acquiring name of the interface for the system
    PcapIf device = alldevs.get(ans);
    System.out.printf("\nUser selected interface: %s\n", device.getDescription());
    
    //We will now open the Interface selected by the user using Pcap.openLive()
    int snaplen = 64 * 1024;  //amount of data for each frame to be captured
    int flags = Pcap.MODE_PROMISCUOUS;  //allows to pass all traffic to the CPU
    int timeout = 10 * 1000;  //This is 10 milliseconds
    Pcap pcap = Pcap.openLive(device.getName(), snaplen, flags, timeout, err);
    
    if(pcap == null){
        System.err.printf("Error while opening device for capture: " + err.toString());
        return;
    }
    
    
    
    
    //We will setup a packet handler
    PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {  
           
            public void nextPacket(PcapPacket packet, String user) {  
                
                Ip4 ip = new Ip4();         //Creating instance of Ipv4
                Tcp tcp = new Tcp();        //Creating instance of TCP
                Udp udp = new Udp();        //Creating instance of UDP
                Icmp icmp = new Icmp();     //Creating instance of ICMP
                Http hp = new Http();       //Creating instance of Http
                
                /*
                We will get our Ip address in bytes
                Each ip address contains 4 bytes or 32 bits ie 1 byte = 8 bits
                Format: X.X.X.X 
                */
                byte[] dIP= new byte[4], sIP=new byte[4];
                if (packet.hasHeader(ip)){
                    dIP = packet.getHeader(ip).destination(); //store destination ip address    
                    sIP= packet.getHeader(ip).source(); //store source ip address
                }
                else
                    return;
                
                String sourceIP = org.jnetpcap.packet.format.FormatUtils.ip(sIP); //changing to string
                String destinationIP = org.jnetpcap.packet.format.FormatUtils.ip(dIP); //changing to string
                
                
                     
                        if(packet.hasHeader(tcp)){
                            //String hurl = hp.fieldValue((Http.Request.Host));
                            //String rurl =  hp.fieldValue((Http.Request.RequestUrl));
                            
                            System.out.println("**************************************************");
                            System.out.printf("Received Packet: %s\nProtocol Name: TCP\nLength: %-4d\nSource: %d\nDestination: %d\nSource IP: %s\nDestination IP: %s\n", new Date(packet.getCaptureHeader().timestampInMillis()),packet.getCaptureHeader().wirelen(), tcp.source(), tcp.destination(),sourceIP,destinationIP);
                            
                        }
                        
                    
                    
            }  
        };
    
    //We will create a loop and ask it to capture infinite packets
   pcap.loop(200, jpacketHandler, ""); 
    
   //Now close the pcap handle
   pcap.close();
    }
    
    
    class UDP extends SwingWorker<Void, Void>{
    
        @Override
        public Void doInBackground(){
        UDPcode();
        return null;
        }
        
        @Override
        public void done(){
        JOptionPane.showMessageDialog(null, "Packet fetching complete!");
        }
        
    }
    public void UDPcode() {
    List<PcapIf> alldevs = new ArrayList<PcapIf>();  //Will Fill up details of Network Interface Cards
    StringBuilder err = new StringBuilder();  //For giving Error Messages
    
    //Pcap.findAllDevs is used to retrieve list of interfaces
    
    int r = Pcap.findAllDevs(alldevs, err);
    if(r == Pcap.NOT_OK || alldevs.isEmpty())
    {
     System.err.printf("Error reading list of devices. Error is %s: ",err.toString());
    }
    else{
        System.out.println("Network Devices Found:\n");
    }
    
    //getname() and getDescription() methods are used 
    int i=1;
    for(PcapIf device: alldevs){
           try {
               byte[] mac = device.getHardwareAddress();
               if(mac == null){
                   continue; //Interface doesn't have a hardware
               }
               String description = (device.getDescription());
               System.out.printf("**************************************************************\n%d. Name: %s\n   Description: %s\n   MAC Address: %s\n", i++, device.getName(),description, mac_string(mac));
           } catch (IOException ex) {
               Logger.getLogger(Packet_Portal.class.getName()).log(Level.SEVERE, null, ex);
           }
            }
        System.out.printf("**************************************************************");
    
       
    //We will now ask User to select an interface.
    System.out.print("\nChoose the interface: ");
    try{
        Thread.sleep(10000);
    }catch(InterruptedException ex){
        Thread.currentThread().interrupt();
    }
    String a = jTextField1.getText();
    int ans = Integer.parseInt(a);
    ans--;
    
    //Acquiring name of the interface for the system
    PcapIf device = alldevs.get(ans);
    System.out.printf("\nUser selected interface: %s\n", device.getDescription());
    
    //We will now open the Interface selected by the user using Pcap.openLive()
    int snaplen = 64 * 1024;  //amount of data for each frame to be captured
    int flags = Pcap.MODE_PROMISCUOUS;  //allows to pass all traffic to the CPU
    int timeout = 10 * 1000;  //This is 10 milliseconds
    Pcap pcap = Pcap.openLive(device.getName(), snaplen, flags, timeout, err);
    
    if(pcap == null){
        System.err.printf("Error while opening device for capture: " + err.toString());
        return;
    }
    
    
    
    
    //We will setup a packet handler
    PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {  
           
            public void nextPacket(PcapPacket packet, String user) {  
                
                Ip4 ip = new Ip4();         //Creating instance of Ipv4
                Tcp tcp = new Tcp();        //Creating instance of TCP
                Udp udp = new Udp();        //Creating instance of UDP
                Icmp icmp = new Icmp();     //Creating instance of ICMP
                Http hp = new Http();       //Creating instance of Http
                
                /*
                We will get our Ip address in bytes
                Each ip address contains 4 bytes or 32 bits ie 1 byte = 8 bits
                Format: X.X.X.X 
                */
                byte[] dIP= new byte[4], sIP=new byte[4];
                if (packet.hasHeader(ip)){
                    dIP = packet.getHeader(ip).destination(); //store destination ip address    
                    sIP= packet.getHeader(ip).source(); //store source ip address
                }
                else
                    return;
                
                String sourceIP = org.jnetpcap.packet.format.FormatUtils.ip(sIP); //changing to string
                String destinationIP = org.jnetpcap.packet.format.FormatUtils.ip(dIP); //changing to string
                
                
                
                     
                        if(packet.hasHeader(udp)){
                            System.out.println("**************************************************");
                            System.out.printf("Received Packet: %s\nProtocol Name: UDP\nLength: %-4d\nSource: %d\nDestination: %d\nSource IP: %s\nDestination IP: %s\n", new Date(packet.getCaptureHeader().timestampInMillis()),packet.getCaptureHeader().wirelen(), udp.source(), udp.destination(),sourceIP,destinationIP);
                            
                        }
                        
                    
                    
            }  
        };
    
    //We will create a loop and ask it to capture infinite packets
   pcap.loop(200, jpacketHandler, ""); 
    
   //Now close the pcap handle
   pcap.close();
    }
   
    
    class HTTP extends SwingWorker<Void, Void>{
    
        @Override
        public Void doInBackground(){
        HTTPcode();
        return null;
        }
        
        @Override
        public void done(){
        JOptionPane.showMessageDialog(null, "Packet fetching complete!");
        }
        
    }
    public void HTTPcode() {
    List<PcapIf> alldevs = new ArrayList<PcapIf>();  //Will Fill up details of Network Interface Cards
    StringBuilder err = new StringBuilder();  //For giving Error Messages
    
    //Pcap.findAllDevs is used to retrieve list of interfaces
    
    int r = Pcap.findAllDevs(alldevs, err);
    if(r == Pcap.NOT_OK || alldevs.isEmpty())
    {
     System.err.printf("Error reading list of devices. Error is %s: ",err.toString());
    }
    else{
        System.out.println("Network Devices Found:\n");
    }
    
    //getname() and getDescription() methods are used 
    int i=1;
    for(PcapIf device: alldevs){
           try {
               byte[] mac = device.getHardwareAddress();
               if(mac == null){
                   continue; //Interface doesn't have a hardware
               }
               String description = (device.getDescription());
               System.out.printf("**************************************************************\n%d. Name: %s\n   Description: %s\n   MAC Address: %s\n", i++, device.getName(),description, mac_string(mac));
           } catch (IOException ex) {
               Logger.getLogger(Packet_Portal.class.getName()).log(Level.SEVERE, null, ex);
           }
            }
        System.out.printf("**************************************************************");
    
       
    //We will now ask User to select an interface.
    System.out.print("\nChoose the interface: ");
    try{
        Thread.sleep(10000);
    }catch(InterruptedException ex){
        Thread.currentThread().interrupt();
    }
    String a = jTextField1.getText();
    int ans = Integer.parseInt(a);
    ans--;
    
    //Acquiring name of the interface for the system
    PcapIf device = alldevs.get(ans);
    System.out.printf("\nUser selected interface: %s\n", device.getDescription());
    
    //We will now open the Interface selected by the user using Pcap.openLive()
    int snaplen = 64 * 1024;  //amount of data for each frame to be captured
    int flags = Pcap.MODE_PROMISCUOUS;  //allows to pass all traffic to the CPU
    int timeout = 10 * 1000;  //This is 10 milliseconds
    Pcap pcap = Pcap.openLive(device.getName(), snaplen, flags, timeout, err);
    
    if(pcap == null){
        System.err.printf("Error while opening device for capture: " + err.toString());
        return;
    }
    
    
    
    
    //We will setup a packet handler
    PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {  
           
            public void nextPacket(PcapPacket packet, String user) {  
                
                Ip4 ip = new Ip4();         //Creating instance of Ipv4
                Tcp tcp = new Tcp();        //Creating instance of TCP
                Udp udp = new Udp();        //Creating instance of UDP
                Icmp icmp = new Icmp();     //Creating instance of ICMP
                Http hp = new Http();       //Creating instance of Http
                
                /*
                We will get our Ip address in bytes
                Each ip address contains 4 bytes or 32 bits ie 1 byte = 8 bits
                Format: X.X.X.X 
                */
                byte[] dIP= new byte[4], sIP=new byte[4];
                if (packet.hasHeader(ip)){
                    dIP = packet.getHeader(ip).destination(); //store destination ip address    
                    sIP= packet.getHeader(ip).source(); //store source ip address
                }
                else
                    return;
                
                String sourceIP = org.jnetpcap.packet.format.FormatUtils.ip(sIP); //changing to string
                String destinationIP = org.jnetpcap.packet.format.FormatUtils.ip(dIP); //changing to string
                
                
                
                     
                        if(packet.hasHeader(hp)){
                            //String hurl = hp.fieldValue((Http.Request.Host));
                            //String rurl =  hp.fieldValue((Http.Request.RequestUrl));
                            System.out.println("**************************************************");
                            System.out.printf("Received Packet: %s\nProtocol Name: HTTP\nLength: %-4d\nHeader Length: %d\nSource IP: %s\nDestination IP: %s\n", new Date(packet.getCaptureHeader().timestampInMillis()),packet.getCaptureHeader().wirelen(), hp.getHeaderLength(),sourceIP,destinationIP);
            
                        }
                        
                    
                    
            }  
        };
    
    //We will create a loop and ask it to capture infinite packets
   pcap.loop(200, jpacketHandler, ""); 
    
   //Now close the pcap handle
   pcap.close();
    }
    
    
    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        taskTCP = new TCP();
        taskTCP.execute();
    }//GEN-LAST:event_button7ActionPerformed

    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        taskHTTP = new HTTP();
        taskHTTP.execute();
    }//GEN-LAST:event_button9ActionPerformed

    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        taskUDP = new UDP();
        taskUDP.execute();
    }//GEN-LAST:event_button8ActionPerformed

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
    System.out.println("\n\n\t\t\t\t\t****************************************\n"
            + "\t\t\t\t\t                                                                 \n"
            + "\t\t\t\t\t                  Welcome Aboard              \n"
            + "\t\t\t\t\t                                                                \n"
            + "\t\t\t\t\t****************************************\n"
            + "\t\t\t                                   Kindly select the filter from the GUI"
            + "\n\n");
    }//GEN-LAST:event_button1ActionPerformed
    
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
    textArea1.setText("");
    jTextField1.setText("");
    }//GEN-LAST:event_button2ActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        
    }//GEN-LAST:event_jTextField1KeyPressed

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Packet_Portal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Packet_Portal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Packet_Portal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Packet_Portal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Packet_Portal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Button button11;
    private java.awt.Button button2;
    private java.awt.Button button7;
    private java.awt.Button button8;
    private java.awt.Button button9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables

    
    
private static String mac_string(byte[] mac){
    
    //StringBuilder creates an empty string builder with a acapacity of 16 elements
    StringBuilder buf = new StringBuilder();
    
    /*
    MAC addresses are 12 digit hexadecimal numbers
    Format: MM:MM:MM:SS:SS:SS
    Leftmost 6 digits called as Prefix is associated with adaptor manufacturer
    Rightmost digits represent identification number for the specific device
    */
    for(byte b : mac){
        if(buf.length() != 0){
            buf.append(':');
        }
        if(b >= 0 && b<16){
            buf.append('0');
        }
        buf.append(Integer.toHexString((b < 0)? b+256 : b).toUpperCase());
    }
    return buf.toString();
    
    }



private void updateTextArea(final String text){
    SwingUtilities.invokeLater(new Runnable(){
        public void run(){
                textArea1.append(text);
        }
        
});
}
 private void redirectSystemStreams(){
     OutputStream out = new OutputStream(){
     @Override
     public void write(int b) throws IOException{
     updateTextArea(String.valueOf((char)b));
     }
     @Override
     public void write(byte[] b,int off, int len) throws IOException{
     updateTextArea(new String(b,off,len));
     }
     
     @Override
     public void write(byte[] b) throws IOException{
     write(b,0,b.length);
     }
     };
 System.setOut(new PrintStream(out,true));
 System.setErr(new PrintStream(out,true));
 }
 

 
    
}
